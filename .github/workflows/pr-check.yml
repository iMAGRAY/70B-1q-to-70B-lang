name: PR Check

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Install Taskfile
        uses: arduino/setup-task@v1

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Generate Capnp stubs
        run: task capnp:gen

      - name: Go Vet
        run: go vet ./...
        working-directory: backend-go

      - name: Cargo Check
        run: cargo check --release
        working-directory: fileforge-rs

      - name: Install deps
        run: |
          go mod download
          npm ci --ignore-scripts --no-audit --no-fund || true
          cargo fetch

      - name: Lint (Go + Rust)
        run: |
          go vet ./...
          cargo clippy --workspace -- -D warnings

      - name: Tests (Go + Rust)
        run: |
          go test ./... -v
          cargo test --workspace --quiet

      - name: Bench before changes
        run: go test -bench=. -run=^$ ./backend-go/... > bench.txt

      - name: Upload benchmark
        uses: actions/upload-artifact@v3
        with:
          name: bench-${{ github.sha }}
          path: bench.txt

      - name: Compare benchmarks & comment
        if: ${{ github.event.pull_request.base.sha }} != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const bench = fs.readFileSync('bench.txt','utf8');
            const body = [
              '#### Benchmark (Go backend)',
              '```',
              bench.trim(),
              '```'
            ].join('\n');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            }); 