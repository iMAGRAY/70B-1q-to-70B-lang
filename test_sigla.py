#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã SIGLA
"""

import sys
import os
import json

def test_sigla():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π SIGLA"""
    print("üî• –¢–µ—Å—Ç–∏—Ä—É–µ–º SIGLA...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from sigla.core import CapsuleStore
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ CapsuleStore")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        print("üì¶ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å...")
        store = CapsuleStore(model_name="sentence-transformers/all-MiniLM-L6-v2")
        print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {store.dimension}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ø—Å—É–ª
        print("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ø—Å—É–ª—ã...")
        with open('sample_capsules.json', 'r', encoding='utf-8') as f:
            capsules = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(capsules)} –∫–∞–ø—Å—É–ª")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø—Å—É–ª –≤ –∏–Ω–¥–µ–∫—Å
        print("üîç –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ø—Å—É–ª—ã –≤ –∏–Ω–¥–µ–∫—Å...")
        store.add_capsules(capsules)
        print("‚úÖ –ö–∞–ø—Å—É–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å...")
        store.save("test_index")
        print("‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫...")
        results = store.query("–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", top_k=3)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        for i, result in enumerate(results[:2]):
            print(f"   {i+1}. {result['text'][:80]}... (score: {result['score']:.3f})")
        
        # –¢–µ—Å—Ç DSL
        print("üß† –¢–µ—Å—Ç–∏—Ä—É–µ–º DSL...")
        from sigla.dsl import INTENT, RETRIEVE, MERGE, INJECT
        from sigla.core import merge_capsules
        
        intent_vector = INTENT(store, "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏")
        retrieved = RETRIEVE(store, intent_vector, top_k=3)
        merged = MERGE(retrieved)
        injected = INJECT(merged)
        
        print("‚úÖ DSL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üéØ –ü—Ä–∏–º–µ—Ä –∏–Ω—ä–µ–∫—Ü–∏–∏:\n{injected[:200]}...")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° SIGLA –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_sigla()
    sys.exit(0 if success else 1) 
